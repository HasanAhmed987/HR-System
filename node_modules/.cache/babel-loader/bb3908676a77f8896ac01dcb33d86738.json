{"ast":null,"code":"var _jsxFileName = \"/home/suddle/Documents/React/HR-System/src/components/common/footer/index.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport Details from \"../details\";\nimport Input from \"../input\";\nimport { TableBody, TableContainer, TableRow, TableCell, TableFooter, TablePagination } from \"@material-ui/core\";\nimport { Table } from \"react-bootstrap\";\nimport { useNavigate } from \"react-router-dom\";\nimport ReactPaginate from \"react-paginate\";\nimport \"./style.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Footer = _ref => {\n  _s();\n\n  let {\n    people\n  } = _ref;\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(5); // Avoid a layout jump when reaching the last page with empty rows.\n\n  const emptyRows = page > 0 ? Math.max(0, (1 + page) * rowsPerPage - rows.length) : 0;\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = event => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  return /*#__PURE__*/_jsxDEV(TableContainer, {\n    component: Paper,\n    children: /*#__PURE__*/_jsxDEV(Table, {\n      sx: {\n        minWidth: 500\n      },\n      \"aria-label\": \"custom pagination table\",\n      children: [/*#__PURE__*/_jsxDEV(TableBody, {\n        children: [(rowsPerPage > 0 ? rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage) : rows).map(row => /*#__PURE__*/_jsxDEV(TableRow, {\n          children: [/*#__PURE__*/_jsxDEV(TableCell, {\n            component: \"th\",\n            scope: \"row\",\n            children: row.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            style: {\n              width: 160\n            },\n            align: \"right\",\n            children: row.calories\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            style: {\n              width: 160\n            },\n            align: \"right\",\n            children: row.fat\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 15\n          }, this)]\n        }, row.name, true, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 13\n        }, this)), emptyRows > 0 && /*#__PURE__*/_jsxDEV(TableRow, {\n          style: {\n            height: 53 * emptyRows\n          },\n          children: /*#__PURE__*/_jsxDEV(TableCell, {\n            colSpan: 6\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TableFooter, {\n        children: /*#__PURE__*/_jsxDEV(TableRow, {\n          children: /*#__PURE__*/_jsxDEV(TablePagination, {\n            rowsPerPageOptions: [5, 10, 25, {\n              label: \"All\",\n              value: -1\n            }],\n            colSpan: 3,\n            count: rows.length,\n            rowsPerPage: rowsPerPage,\n            page: page,\n            SelectProps: {\n              inputProps: {\n                \"aria-label\": \"rows per page\"\n              },\n              native: true\n            },\n            onPageChange: handleChangePage,\n            onRowsPerPageChange: handleChangeRowsPerPage,\n            ActionsComponent: TablePaginationActions\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Footer, \"OeamEqfqYGafDj9X5k7ZYjy/zXo=\");\n\n_c = Footer;\nexport default Footer; // const [pageNumber, setPageNumber] = useState(0);\n// const usersPerPage = 10;\n// const pagesVisited = pageNumber * usersPerPage;\n// const [search, setSearch] = useState(\"\");\n// const navigate = useNavigate();\n// const [values] = useState([\n//   {\n//     type: \"text\",\n//     placeholder: \"Search\"\n//   }\n// ]);\n// const handleChange = (e) => {\n//   setSearch(e.target.value);\n// };\n// return (\n//   <div className=\"container\">\n//     <div className=\"filter-container\">\n//       <div className=\"search\">\n//         <Input\n//           values={values}\n//           className={\"searchBar\"}\n//           handleChange={handleChange}\n//         />\n//       </div>\n//       <div className=\"filter\">\n//         <select name=\"title\" id=\"title\">\n//           {people.map((item) => (\n//             <option\n//               key={item.id.toString()}\n//               value={item.title}\n//               placeholder=\"Filter\"\n//             >\n//               {item.title}\n//             </option>\n//           ))}\n//         </select>\n//       </div>\n//     </div>\n//     <Table className=\"table\">\n//       <thead>\n//         <tr>\n//           <th scope=\"col\">Image</th>\n//           <th scope=\"col\">Name</th>\n//           <th scope=\"col\">Title</th>\n//           <th scope=\"col\">Email</th>\n//           <th scope=\"col\">Contact</th>\n//         </tr>\n//       </thead>\n//       <tbody>\n//         {people.map((item) => (\n//           <tr\n//             onClick={() => navigate(\"/people/details\", <Details />)}\n//             key={item.id.toString()}\n//           >\n//             <td>{item.image}</td>\n//             <td>{item.name}</td>\n//             <td>{item.title}</td>\n//             <td>{item.email}</td>\n//             <td>{item.contact}</td>\n//           </tr>\n//         ))}\n//       </tbody>\n//     </Table>\n//   </div>\n// );\n\n/*  */\n// <BootstrapTable\n//   bootstrap4\n//   keyField=\"id\"\n//   data={people}\n//   columns={columns}\n//   bordered={false}\n//   rowEvent={handleClick}\n// />\n// const columns = [\n//   {\n//     dataField: \"image\",\n//     text: \"Image\"\n//   },\n//   {\n//     dataField: \"name\",\n//     text: \"Name\",\n//     sort: true\n//   },\n//   {\n//     dataField: \"title\",\n//     text: \"Title\",\n//     sort: true\n//   },\n//   {\n//     dataField: \"email\",\n//     text: \"Email\",\n//     sort: true\n//   },\n//   {\n//     dataField: \"contact\",\n//     text: \"Contact\",\n//     sort: true\n//   }\n// ];\n\nvar _c;\n\n$RefreshReg$(_c, \"Footer\");","map":{"version":3,"sources":["/home/suddle/Documents/React/HR-System/src/components/common/footer/index.jsx"],"names":["React","useState","Details","Input","TableBody","TableContainer","TableRow","TableCell","TableFooter","TablePagination","Table","useNavigate","ReactPaginate","Footer","people","page","setPage","rowsPerPage","setRowsPerPage","emptyRows","Math","max","rows","length","handleChangePage","event","newPage","handleChangeRowsPerPage","parseInt","target","value","Paper","minWidth","slice","map","row","name","width","calories","fat","height","label","inputProps","native","TablePaginationActions"],"mappings":"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":["import React, { useState } from \"react\";\nimport Details from \"../details\";\nimport Input from \"../input\";\nimport {\n  TableBody,\n  TableContainer,\n  TableRow,\n  TableCell,\n  TableFooter,\n  TablePagination\n} from \"@material-ui/core\";\nimport { Table } from \"react-bootstrap\";\nimport { useNavigate } from \"react-router-dom\";\nimport ReactPaginate from \"react-paginate\";\nimport \"./style.css\";\n\nconst Footer = ({ people }) => {\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\n\n  // Avoid a layout jump when reaching the last page with empty rows.\n  const emptyRows =\n    page > 0 ? Math.max(0, (1 + page) * rowsPerPage - rows.length) : 0;\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  return (\n    <TableContainer component={Paper}>\n      <Table sx={{ minWidth: 500 }} aria-label=\"custom pagination table\">\n        <TableBody>\n          {(rowsPerPage > 0\n            ? rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n            : rows\n          ).map((row) => (\n            <TableRow key={row.name}>\n              <TableCell component=\"th\" scope=\"row\">\n                {row.name}\n              </TableCell>\n              <TableCell style={{ width: 160 }} align=\"right\">\n                {row.calories}\n              </TableCell>\n              <TableCell style={{ width: 160 }} align=\"right\">\n                {row.fat}\n              </TableCell>\n            </TableRow>\n          ))}\n\n          {emptyRows > 0 && (\n            <TableRow style={{ height: 53 * emptyRows }}>\n              <TableCell colSpan={6} />\n            </TableRow>\n          )}\n        </TableBody>\n        <TableFooter>\n          <TableRow>\n            <TablePagination\n              rowsPerPageOptions={[5, 10, 25, { label: \"All\", value: -1 }]}\n              colSpan={3}\n              count={rows.length}\n              rowsPerPage={rowsPerPage}\n              page={page}\n              SelectProps={{\n                inputProps: {\n                  \"aria-label\": \"rows per page\"\n                },\n                native: true\n              }}\n              onPageChange={handleChangePage}\n              onRowsPerPageChange={handleChangeRowsPerPage}\n              ActionsComponent={TablePaginationActions}\n            />\n          </TableRow>\n        </TableFooter>\n      </Table>\n    </TableContainer>\n  );\n};\n\nexport default Footer;\n// const [pageNumber, setPageNumber] = useState(0);\n\n// const usersPerPage = 10;\n// const pagesVisited = pageNumber * usersPerPage;\n\n// const [search, setSearch] = useState(\"\");\n// const navigate = useNavigate();\n\n// const [values] = useState([\n//   {\n//     type: \"text\",\n//     placeholder: \"Search\"\n//   }\n// ]);\n\n// const handleChange = (e) => {\n//   setSearch(e.target.value);\n// };\n\n// return (\n//   <div className=\"container\">\n//     <div className=\"filter-container\">\n//       <div className=\"search\">\n//         <Input\n//           values={values}\n//           className={\"searchBar\"}\n//           handleChange={handleChange}\n//         />\n//       </div>\n//       <div className=\"filter\">\n//         <select name=\"title\" id=\"title\">\n//           {people.map((item) => (\n//             <option\n//               key={item.id.toString()}\n//               value={item.title}\n//               placeholder=\"Filter\"\n//             >\n//               {item.title}\n//             </option>\n//           ))}\n//         </select>\n//       </div>\n//     </div>\n//     <Table className=\"table\">\n//       <thead>\n//         <tr>\n//           <th scope=\"col\">Image</th>\n//           <th scope=\"col\">Name</th>\n//           <th scope=\"col\">Title</th>\n//           <th scope=\"col\">Email</th>\n//           <th scope=\"col\">Contact</th>\n//         </tr>\n//       </thead>\n//       <tbody>\n//         {people.map((item) => (\n//           <tr\n//             onClick={() => navigate(\"/people/details\", <Details />)}\n//             key={item.id.toString()}\n//           >\n//             <td>{item.image}</td>\n//             <td>{item.name}</td>\n//             <td>{item.title}</td>\n//             <td>{item.email}</td>\n//             <td>{item.contact}</td>\n//           </tr>\n//         ))}\n//       </tbody>\n//     </Table>\n//   </div>\n// );\n\n/*  */\n// <BootstrapTable\n//   bootstrap4\n//   keyField=\"id\"\n//   data={people}\n//   columns={columns}\n//   bordered={false}\n//   rowEvent={handleClick}\n// />\n// const columns = [\n//   {\n//     dataField: \"image\",\n//     text: \"Image\"\n//   },\n//   {\n//     dataField: \"name\",\n//     text: \"Name\",\n//     sort: true\n//   },\n//   {\n//     dataField: \"title\",\n//     text: \"Title\",\n//     sort: true\n//   },\n//   {\n//     dataField: \"email\",\n//     text: \"Email\",\n//     sort: true\n//   },\n//   {\n//     dataField: \"contact\",\n//     text: \"Contact\",\n//     sort: true\n//   }\n// ];\n"]},"metadata":{},"sourceType":"module"}